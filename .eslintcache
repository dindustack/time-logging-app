[{"C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\index.js":"1","C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\App.js":"2","C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\components\\TimersDashboard.js":"3","C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\helpers.js":"4","C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\client.js":"5"},{"size":295,"mtime":1612300796950,"results":"6","hashOfConfig":"7"},{"size":171,"mtime":1611149148527,"results":"8","hashOfConfig":"7"},{"size":12683,"mtime":1612300845924,"results":"9","hashOfConfig":"7"},{"size":1332,"mtime":1611161229513,"results":"10","hashOfConfig":"7"},{"size":2210,"mtime":1612300791485,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1fn9y0f",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\index.js",[],["24","25"],"C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\App.js",[],"C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\components\\TimersDashboard.js",["26"],"import React from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nclass TimersDashboard extends React.Component {\r\n  state = {\r\n    timers: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadTimersFromServer();\r\n    setInterval(this.loadTimersFromServer, 5000);\r\n  }\r\n\r\n  loadTimersFromServer = () => {\r\n    window.client.getTimers((serverTimers) =>\r\n      this.setState({ timers: serverTimers })\r\n    );\r\n  };\r\n\r\n  handleCreateFormSubmit = (timer) => {\r\n    this.createTimer(timer);\r\n  };\r\n\r\n  handleEditFormSubmit = (attrs) => {\r\n    this.updateTimer(attrs);\r\n  };\r\n\r\n  handleTrashClick = (timerId) => {\r\n    this.deleteTimer(timerId);\r\n  };\r\n\r\n  handleStartClick = (timerId) => {\r\n    this.startTimer(timerId);\r\n  };\r\n\r\n  handleStopClick = (timerId) => {\r\n    this.stopTimer(timerId);\r\n  };\r\n\r\n  createTimer = (timer) => {\r\n    const t = window.helpers.newTimer(timer);\r\n    this.setState({\r\n      timers: this.state.timers.concat(t),\r\n    });\r\n    window.client.createTimer(t);\r\n  };\r\n\r\n  updateTimer = (attrs) => {\r\n    this.setState({\r\n      timers: this.state.timers.map((timer) => {\r\n        if (timer.id === attrs.id) {\r\n          return Object.assign({}, timer, {\r\n            title: attrs.title,\r\n            project: attrs.project,\r\n          });\r\n        } else {\r\n          return timer;\r\n        }\r\n      }),\r\n    });\r\n    window.client.updateTimer(attrs);\r\n  };\r\n\r\n  deleteTimer = (timerId) => {\r\n    this.setState({\r\n      timers: this.state.timers.filter((t) => t.id !== timerId),\r\n    });\r\n    window.client.deleteTimer({ id: timerId });\r\n  };\r\n\r\n  startTimer = (timerId) => {\r\n    const now = Date.now();\r\n\r\n    this.setState({\r\n      timers: this.state.timers.map((timer) => {\r\n        if (timer.id === timerId) {\r\n          return Object.assign({}, timer, {\r\n            runningSince: now,\r\n          });\r\n        } else {\r\n          return timer;\r\n        }\r\n      }),\r\n    });\r\n    window.client.startTimer({ id: timerId, start: now });\r\n  };\r\n\r\n  stopTimer = (timerId) => {\r\n    const now = Date.now();\r\n\r\n    this.setState({\r\n      timers: this.state.timers.map((timer) => {\r\n        if (timer.id === timerId) {\r\n          const lastElapsed = now - timer.runningSince;\r\n          return Object.assign({}, timer, {\r\n            elapsed: timer.elapsed + lastElapsed,\r\n            runningSince: null,\r\n          });\r\n        } else {\r\n          return timer;\r\n        }\r\n      }),\r\n    });\r\n    window.client.stopTimer({ id: timerId, stop: now });\r\n  };\r\n\r\n  render() {\r\n    <EditableTimerList\r\n      timers={this.state.timers}\r\n      onFormSubmit={this.handleEditFormSubmit}\r\n    />;\r\n    return (\r\n      <section className=\"d-flex align-items-center pt-5 pt-md-5\">\r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <h2 className=\"mb-5 text-center\">Time Logging App</h2>\r\n              <EditableTimerList\r\n                timers={this.state.timers}\r\n                onFormSubmit={this.handleEditFormSubmit}\r\n                onTrashClick={this.handleTrashClick}\r\n                onStartClick={this.handleStartClick}\r\n                onStopClick={this.handleStopClick}\r\n              />\r\n              <ToggleableTimerForm onFormSubmit={this.handleCreateFormSubmit} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nclass EditableTimerList extends React.Component {\r\n  render() {\r\n    const timers = this.props.timers.map((timer) => (\r\n      <EditableTimer\r\n        key={timer.id}\r\n        id={timer.id}\r\n        title={timer.title}\r\n        project={timer.project}\r\n        elapsed={timer.elapsed}\r\n        runningSince={timer.runningSince}\r\n        onFormSubmit={this.props.onFormSubmit}\r\n        onTrashClick={this.props.onTrashClick}\r\n        onStartClick={this.props.onStartClick}\r\n        onStopClick={this.props.onStopClick}\r\n      />\r\n    ));\r\n    return (\r\n      <>\r\n        <div id=\"timers\">{timers}</div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass EditableTimer extends React.Component {\r\n  state = {\r\n    editFormOpen: false,\r\n  };\r\n  handleEditClick = () => {\r\n    this.openForm();\r\n  };\r\n  handleFormClose = () => {\r\n    this.closeForm();\r\n  };\r\n  handleSubmit = (timer) => {\r\n    this.props.onFormSubmit(timer);\r\n    this.closeForm();\r\n  };\r\n  closeForm = () => {\r\n    this.setState({ editFormOpen: false });\r\n  };\r\n  openForm = () => {\r\n    this.setState({ editFormOpen: true });\r\n  };\r\n  render() {\r\n    if (this.state.editFormOpen) {\r\n      return (\r\n        <TimerForm\r\n          id={this.props.id}\r\n          title={this.props.title}\r\n          project={this.props.project}\r\n          onFormSubmit={this.handleSubmit}\r\n          onFormClose={this.handleFormClose}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <Timer\r\n          id={this.props.id}\r\n          title={this.props.title}\r\n          project={this.props.project}\r\n          elapsed={this.props.elapsed}\r\n          runningSince={this.props.runningSince}\r\n          onEditClick={this.handleEditClick}\r\n          onTrashClick={this.props.onTrashClick}\r\n          onStartClick={this.props.onStartClick}\r\n          onStopClick={this.props.onStopClick}\r\n        />\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nclass Timer extends React.Component {\r\n  componentDidMount() {\r\n    this.forceUpdateInterval = setInterval(() => this.forceUpdate(), 50);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.forceUpdateInterval);\r\n  }\r\n\r\n  handleStartClick = () => {\r\n    this.props.onStartClick(this.props.id);\r\n  };\r\n\r\n  handleTrashClick = () => {\r\n    this.props.onTrashClick(this.props.id);\r\n  };\r\n\r\n  handleStopClick = () => {\r\n    this.props.onStopClick(this.props.id);\r\n  };\r\n\r\n  render() {\r\n    const elapsedString = window.helpers.renderElapsedString(\r\n      this.props.elapsed,\r\n      this.props.runningSince\r\n    );\r\n    return (\r\n      <>\r\n        <div className=\"card mb-3\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row mb-4\">\r\n              <div className=\"col-12\">\r\n                <h4 className=\"\">{this.props.title}</h4>\r\n                <span className=\"text-muted ml-0\">{this.props.project}</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row justify-content-center\">\r\n              <h1 className=\"\">{elapsedString}</h1>\r\n            </div>\r\n\r\n            <div className=\"row justify-content-end mb-3\">\r\n              <div className=\"d-flex\">\r\n                <button className=\"btn\" onClick={this.handleTrashClick}>\r\n                  <svg\r\n                    xmlns=\"http:www.w3.org/2000/svg\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"#dc3545\"\r\n                    width=\"26px\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth=\"2\"\r\n                      d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n\r\n                <button className=\"btn\" onClick={this.props.onEditClick}>\r\n                  <svg\r\n                    xmlns=\"http:www.w3.org/2000/svg\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"#0fcc98\"\r\n                    width=\"26px\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth=\"2\"\r\n                      d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <TimerActionButton\r\n              timerIsRunning={!!this.props.runningSince}\r\n              onStartClick={this.handleStartClick}\r\n              onStopClick={this.handleStopClick}\r\n            />\r\n\r\n            {/* <!-- End Row --> */}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass TimerActionButton extends React.Component {\r\n  render() {\r\n    if (this.props.timerIsRunning) {\r\n      return (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn btn-outline-danger btn-block\"\r\n              onClick={this.props.onStopClick}\r\n            >\r\n              Stop\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn btn-outline-success btn-block\"\r\n              onClick={this.props.onStartClick}\r\n            >\r\n              Start\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nclass TimerForm extends React.Component {\r\n  state = {\r\n    title: this.props.title || \"\",\r\n    project: this.props.project || \"\",\r\n  };\r\n  handleTitleChange = (e) => {\r\n    this.setState({ title: e.target.value });\r\n  };\r\n  handleProjectChange = (e) => {\r\n    this.setState({ project: e.target.value });\r\n  };\r\n  handleSubmit = () => {\r\n    this.props.onFormSubmit({\r\n      id: this.props.id,\r\n      title: this.state.title,\r\n      project: this.state.project,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const submitText = this.props.id ? \"Update\" : \"Create\";\r\n    return (\r\n      <>\r\n        <div className=\"card mb-3\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row mb-4\">\r\n              <div className=\"col-12\">\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"\" className=\"form-label\">\r\n                    Title\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={this.state.title}\r\n                    className=\"form-control\"\r\n                    onChange={this.handleTitleChange}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"\" className=\"form-label\">\r\n                    Project\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={this.state.project}\r\n                    onChange={this.handleProjectChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row mb-3\">\r\n              <div className=\"col-6 mb-3\">\r\n                <button\r\n                  className=\"btn btn-outline-primary btn-block\"\r\n                  onClick={this.handleSubmit}\r\n                >\r\n                  {submitText}\r\n                </button>\r\n              </div>\r\n              <div className=\"col-6 mb-3\">\r\n                <button\r\n                  className=\"btn btn-outline-danger btn-block\"\r\n                  onClick={this.props.onFormClose}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </div>\r\n            {/* <!-- End Row --> */}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass ToggleableTimerForm extends React.Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n  handleFormOpen = () => {\r\n    this.setState({ isOpen: true });\r\n  };\r\n\r\n  handleFormClose = () => {\r\n    this.setState({ isOpen: false });\r\n  };\r\n\r\n  handleFormSubmit = (timer) => {\r\n    this.props.onFormSubmit(timer);\r\n    this.setState({ isOpen: false });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isOpen) {\r\n      return (\r\n        <TimerForm\r\n          onFormSubmit={this.handleFormSubmit}\r\n          onFormClose={this.handleFormClose}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <div className=\"mb-3\">\r\n            <button\r\n              className=\"btn btn-block btn-white btn-outline-secondary\"\r\n              onClick={this.handleFormOpen}\r\n            >\r\n              <svg\r\n                xmlns=\"http:www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n                width=\"26px\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\r\n                />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default TimersDashboard;\r\n","C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\helpers.js",[],"C:\\Users\\user\\OneDrive\\Documents\\FRONT-END\\time-logging-app\\src\\client.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":2,"column":16,"nodeType":"33","messageId":"34","endLine":2,"endColumn":20},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'uuid' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]